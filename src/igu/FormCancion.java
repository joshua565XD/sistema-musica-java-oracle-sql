/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package igu;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import spooty.models.Cancion;
import java.awt.GridLayout;
import java.io.File;
import javax.swing.DropMode;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.tag.Tag;
import spooty.views.PanelReproductor;
import javax.swing.JComponent;
import javax.swing.JTable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.DataFlavor;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import spooty.models.ListaReproduccion;



/**
 *
 * @author recinos
 */
public class FormCancion extends javax.swing.JFrame {
    private PanelReproductor musica;
    private ListaReproduccion listaReproduccion = new ListaReproduccion();
    
    /**
     * Creates new form FormCancion
     */
    public FormCancion() {
        initComponents();
        configureDragAndDrop();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        nombreCancion = new javax.swing.JTextField();
        artisCancion = new javax.swing.JTextField();
        albumCancion = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("SpotieFy Java");

        jLabel2.setText("Nombre");

        jLabel3.setText("Artista");

        jLabel4.setText("Album");

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        artisCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artisCancionActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titulo", "Artista", "Album", "Duracion", "Ruta"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("Play");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Buscar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("anterior");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("next");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Eliminar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Editar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Guardar");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Carga");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel5.setText("Cancion");

        jLabel6.setText("PlayList");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(142, 142, 142))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6))
                            .addComponent(nombreCancion, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(artisCancion, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(albumCancion, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jLabel6))
                .addGap(33, 33, 33))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel5))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(artisCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(albumCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton8))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void artisCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artisCancionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_artisCancionActionPerformed

    
    //arrastrar y soltar en la tabla
   private void configureDragAndDrop() {
        TransferHandler handler = new TransferHandler() {
            private int[] rows = null;

            @Override
            public int getSourceActions(JComponent c) {
                return MOVE;
            }

            @Override
            protected Transferable createTransferable(JComponent c) {
                JTable table = (JTable) c;
                rows = table.getSelectedRows();
                return new StringSelection(""); // No es necesario transferir datos reales
            }

            @Override
            public boolean canImport(TransferHandler.TransferSupport info) {
                return info.isDrop() && info.isDataFlavorSupported(DataFlavor.stringFlavor);
            }

            @Override
            public boolean importData(TransferHandler.TransferSupport support) {
                if (!canImport(support)) {
                    return false;
                }

                JTable.DropLocation dl = (JTable.DropLocation) support.getDropLocation();
                int dropRow = dl.getRow();

                if (rows != null) {
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    int[] selectedRows = rows;

                    for (int row : selectedRows) {
                        if (dropRow > row) {
                            dropRow--;
                        }
                        model.moveRow(row, row, dropRow);
                        dropRow++;
                    }
                    rows = null;
                    return true;
                }
                return false;
            }
        };

        jTable1.setDragEnabled(true);
        jTable1.setDropMode(DropMode.INSERT_ROWS);
        jTable1.setTransferHandler(handler);
        jTable1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }
    
    //Add Button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("MP3 Files", "mp3"));
    int returnValue = fileChooser.showOpenDialog(null);
    
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        String rutaArchivo = selectedFile.getAbsolutePath();

        // Variables para almacenar la información de la canción
        String titulo = selectedFile.getName();
        String artista = artisCancion.getText();
        String album = albumCancion.getText();
        
        // Validar que los campos de artista y álbum no estén vacíos
    if (artista.isEmpty() || album.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Por favor, complete la informacion de artista y album");
        return; // Salir del método si algún campo está vacío
    }
        //agarra la duracion
        String duracion = "00:00";
        try {
            AudioFile audioFile = AudioFileIO.read(selectedFile);
            Tag tag = audioFile.getTag();
            
            if (tag != null) {
                // Si el archivo tiene metadatos, los obtenemos
                int duracionSegundos = audioFile.getAudioHeader().getTrackLength();
                duracion = String.format("%02d:%02d", duracionSegundos / 60, duracionSegundos % 60);
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "No se pudieron obtener los Datos. Se usaran valores predeterminados.");
        }

        // Crear objeto Cancion
        Cancion nuevaCancion = new Cancion(titulo, artista, album, duracion, rutaArchivo);
        
        // Agregar la canción a la lista de reproducción
        listaReproduccion.agregarCancion(nuevaCancion);
        
     
        // Añadir a la tabla
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{titulo, artista, album, duracion, rutaArchivo});
        JOptionPane.showMessageDialog(null, "CANCION "+ titulo + " AGREGADA" );
    }
             
    }//GEN-LAST:event_jButton1ActionPerformed

    // pausa
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

    try {
        musica.stop();
    } catch (Exception e) {
        // Manejar la excepción aquí
        System.err.println("Error al detener la reproducción: ");
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 //tabla general de agregar canciones
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow != -1) {
        String filePath = (String) jTable1.getValueAt(selectedRow, 4);

        if (filePath != null && !filePath.isEmpty()) {
            if (musica != null) {
                musica.stop();  // Detener cualquier reproducción en curso
            } else {
                musica = new PanelReproductor();
            }
            musica.play(filePath);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontro la ruta del archivo." + filePath);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona una canción de la lista.");
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Search Button
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// Obtener el nombre
String noCan = nombreCancion.getText().trim();

// Verificar si el nombre está vacío
if (noCan.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Por favor, ingrese el nombre de la cancion.");
    return; // Salir del método si el campo está vacío
}

// Si el nombre no está vacío, proceder con la búsqueda
DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
boolean encontrada = false;

for (int i = 0; i < model.getRowCount(); i++) {
    String titulo = (String) model.getValueAt(i, 0); // La primera columna es el título
    if (titulo.equalsIgnoreCase(noCan)) {
        // Selecciona la fila encontrada en la tabla
        jTable1.setRowSelectionInterval(i, i);
        encontrada = true;
        JOptionPane.showMessageDialog(this, "CANCION " + titulo +" ENCONTRADA " );
        break;
    }
}

if (!encontrada) {
    JOptionPane.showMessageDialog(null, "Cancion no existe");
}
    }//GEN-LAST:event_jButton4ActionPerformed

    //next button
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
   //botin next
try {
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow != -1) {
        // Calcula la siguiente fila, circular al principio si es necesario
        int nextRow = (selectedRow + 1) % jTable1.getRowCount();
        String filePath = (String) jTable1.getValueAt(nextRow, 4);

        if (filePath != null && !filePath.isEmpty()) {
            if (musica != null) {
                musica.stop(); // Detener cualquier reproducción en curso
            } else {
                musica = new PanelReproductor();
            }
            musica.play(filePath);
            jTable1.setRowSelectionInterval(nextRow, nextRow);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la ruta del archivo.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona una canción de la lista.");
    }
} catch (Exception e) {
    // Manejar cualquier excepción que pueda ocurrir
    JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar reproducir la siguiente canción: ");
}

    }//GEN-LAST:event_jButton6ActionPerformed

    //back button
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    // botón atrás
try {
    int selectedRow = jTable1.getSelectedRow();

    if (selectedRow != -1) {
        int prevRow = (selectedRow - 1 + jTable1.getRowCount()) % jTable1.getRowCount(); // Circular hacia el final
        String filePath = (String) jTable1.getValueAt(prevRow, 4);

        if (filePath != null && !filePath.isEmpty()) {
            if (musica != null) {
                musica.stop(); // Detener cualquier reproducción en curso
            } else {
                musica = new PanelReproductor();
            }
            musica.play(filePath);
            jTable1.setRowSelectionInterval(prevRow, prevRow);
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la ruta del archivo.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona una canción de la lista.");
    }
} catch (Exception e) {
    // Manejar cualquier excepción que pueda ocurrir
    JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar reproducir la canción anterior: ");
    e.printStackTrace(); // Imprime el stack trace para depuración
}

    }//GEN-LAST:event_jButton5ActionPerformed

    //Delete button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
// delete
try {
    int selectedRow = jTable1.getSelectedRow();

    // Verificar si hay una fila seleccionada
    if (selectedRow != -1) {
        // Obtener el título de la canción seleccionada
        String titulo = (String) jTable1.getValueAt(selectedRow, 0);

        // Confirmar la eliminación
        int confirmacion = JOptionPane.showConfirmDialog(
            this,
            "¿Estás seguro de que quieres eliminar la canción \"" + titulo + "\"?",
            "Confirmación de eliminación",
            JOptionPane.YES_NO_OPTION
        );

        if (confirmacion == JOptionPane.YES_OPTION) {
            // Eliminar la canción de la tabla
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.removeRow(selectedRow);
            JOptionPane.showMessageDialog(null, titulo + " Eliminada de la lista.");

            // Eliminar la canción de la lista de reproducción
            Cancion cancionAEliminar = null;
            for (Cancion cancion : listaReproduccion.getPlaylist()) {
                if (cancion.getTitulo().equals(titulo)) {
                    cancionAEliminar = cancion;
                    break;
                }
            }

            if (cancionAEliminar != null) {
                listaReproduccion.eliminarCancion(listaReproduccion.getPlaylist().indexOf(cancionAEliminar));
            }
        }
    } else {
        // No se ha seleccionado ninguna fila
        JOptionPane.showMessageDialog(null, "Selecciona una canción de la lista para eliminar.");
    }
} catch (Exception e) {
    // Manejar cualquier excepción que pueda ocurrir
    JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar eliminar la cancion ");
}

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:private void editarCancion() {
    int selectedRow = jTable1.getSelectedRow();

    // Verificar si hay una fila seleccionada
    if (selectedRow != -1) {
        // Obtener los datos actuales de la fila seleccionada
        String tituloActual = (String) jTable1.getValueAt(selectedRow, 0);
        String artistaActual = (String) jTable1.getValueAt(selectedRow, 1);
        String albumActual = (String) jTable1.getValueAt(selectedRow, 2);
        String duracionActual = (String) jTable1.getValueAt(selectedRow, 3);
        String rutaArchivoActual = (String) jTable1.getValueAt(selectedRow, 4);

        // Mostrar un cuadro de diálogo para editar los datos
        JTextField txtTitulo = new JTextField(tituloActual);
        JTextField txtArtista = new JTextField(artistaActual);
        JTextField txtAlbum = new JTextField(albumActual);
        JTextField txtDuracion = new JTextField(duracionActual);

        JPanel panel = new JPanel(new GridLayout(0, 1));
        panel.add(new JLabel("Título:"));
        panel.add(txtTitulo);
        panel.add(new JLabel("Artista:"));
        panel.add(txtArtista);
        panel.add(new JLabel("Álbum:"));
        panel.add(txtAlbum);
        panel.add(new JLabel("Duración:"));
        panel.add(txtDuracion);

        int result = JOptionPane.showConfirmDialog(this, panel, "Editar Canción", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            // Obtener los nuevos datos
            String nuevoTitulo = txtTitulo.getText();
            String nuevoArtista = txtArtista.getText();
            String nuevoAlbum = txtAlbum.getText();
            String nuevaDuracion = txtDuracion.getText();

            // Actualizar la tabla
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setValueAt(nuevoTitulo, selectedRow, 0);
            model.setValueAt(nuevoArtista, selectedRow, 1);
            model.setValueAt(nuevoAlbum, selectedRow, 2);
            model.setValueAt(nuevaDuracion, selectedRow, 3);

            // Actualizar el ArrayList
            String rutaArchivo = (String) jTable1.getValueAt(selectedRow, 4); // La ruta del archivo no cambia
            Cancion cancionAEditar = listaReproduccion.getPlaylist().get(selectedRow);
            cancionAEditar.setTitulo(nuevoTitulo);
            cancionAEditar.setArtista(nuevoArtista);
            cancionAEditar.setAlbum(nuevoAlbum);
            cancionAEditar.setDuracion(nuevaDuracion);
        }
    } else {
        // No se ha seleccionado ninguna fila
        JOptionPane.showMessageDialog(this, "Selecciona una canción de la lista para editar.");
    
}
    }//GEN-LAST:event_jButton8ActionPerformed

    
    //exportar
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar archivo CSV");
    int userSelection = fileChooser.showSaveDialog(this);
    
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            int columnCount = model.getColumnCount();
            
            // Escribir la cabecera del archivo CSV
            for (int i = 0; i < columnCount; i++) {
                writer.write(model.getColumnName(i));
                if (i < columnCount - 1) {
                    writer.write(",");
                }
            }
            writer.newLine();
            
            // Escribir los datos de las filas
            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < columnCount; j++) {
                    writer.write(String.valueOf(model.getValueAt(i, j)));
                    if (j < columnCount - 1) {
                        writer.write(",");
                    }
                }
                writer.newLine();
            }
            
            JOptionPane.showMessageDialog(this, "Lista de reproducción exportada exitosamente.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton9ActionPerformed

    
    //Carga de datos
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Abrir archivo CSV");
    int userSelection = fileChooser.showOpenDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToOpen = fileChooser.getSelectedFile();
        
        try (BufferedReader reader = new BufferedReader(new FileReader(fileToOpen))) {
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Limpiar la tabla antes de cargar los nuevos datos

            String line;
            boolean isFirstLine = true;
            String[] columnNames = null;

            while ((line = reader.readLine()) != null) {
                String[] values = line.split(","); // Asumimos que el archivo CSV usa comas como delimitadores

                if (isFirstLine) {
                    // Configurar las cabeceras de la tabla
                    columnNames = values;
                    model.setColumnIdentifiers(columnNames);
                    isFirstLine = false;
                } else {
                    // Añadir los datos de las filas
                    model.addRow(values);
                }
            }

            if (columnNames == null) {
                JOptionPane.showMessageDialog(this, "El archivo CSV está vacío o no tiene cabeceras.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Archivo CSV cargado exitosamente.");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButton10ActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormCancion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField albumCancion;
    private javax.swing.JTextField artisCancion;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nombreCancion;
    // End of variables declaration//GEN-END:variables
}
