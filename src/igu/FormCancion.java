/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package igu;

import java.awt.BorderLayout;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import spooty.models.Cancion;
import java.awt.GridLayout;
import java.io.File;
import javax.swing.DropMode;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.tag.Tag;
import spooty.views.PanelReproductor;
import javax.swing.JComponent;
import javax.swing.JTable;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.DataFlavor;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTextField;
import report.ReportesDAO;
import spooty.models.ListaReproduccion;
import spooty.models.Usuario;
import spooty.models.UsuarioSesion;

/**
 *
 * @author recinos
 */
public class FormCancion extends javax.swing.JFrame {

    private PanelReproductor musica;

    /**
     * Creates new form FormCancion
     */
    public FormCancion() {
        initComponents();
        configureDragAndDrop();

        cargarDatosEnTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        nombreCancion = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Impact", 0, 18)); // NOI18N
        jLabel1.setText("SpotieFy Java");

        jLabel2.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel2.setText("Buscar por Lista");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar 32.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setFocusPainted(false);
        jButton1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar negro 32.png"))); // NOI18N
        jButton1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/agregar negro 32.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/pausa blanco.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setFocusPainted(false);
        jButton2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/pausa pequeño.png"))); // NOI18N
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Pausa negro.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lista", "Titulo", "Artista", "Album", "Duracion", "Ruta"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/play blanco.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setFocusPainted(false);
        jButton3.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/play pequeño.png"))); // NOI18N
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/play negro.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar 32.png"))); // NOI18N
        jButton4.setBorderPainted(false);
        jButton4.setContentAreaFilled(false);
        jButton4.setFocusPainted(false);
        jButton4.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar negro 32.png"))); // NOI18N
        jButton4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/buscar negro 32.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Anterior blanco.png"))); // NOI18N
        jButton5.setBorder(null);
        jButton5.setBorderPainted(false);
        jButton5.setContentAreaFilled(false);
        jButton5.setFocusPainted(false);
        jButton5.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/anterior pequeño.png"))); // NOI18N
        jButton5.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Anterior negro.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/arrow_control_forward_direction_step_right_next_icon_219289.png"))); // NOI18N
        jButton6.setBorderPainted(false);
        jButton6.setContentAreaFilled(false);
        jButton6.setFocusPainted(false);
        jButton6.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/siguiente pequeño.png"))); // NOI18N
        jButton6.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/right_multimedia_arrow_music_navigation_forward_next_icon_219360.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/eliminar 32.png"))); // NOI18N
        jButton7.setBorderPainted(false);
        jButton7.setContentAreaFilled(false);
        jButton7.setFocusPainted(false);
        jButton7.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Eliminar negro 32.png"))); // NOI18N
        jButton7.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Eliminar negro 32.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar 32.png"))); // NOI18N
        jButton8.setBorderPainted(false);
        jButton8.setContentAreaFilled(false);
        jButton8.setFocusPainted(false);
        jButton8.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar negro 32.png"))); // NOI18N
        jButton8.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/editar negro 32.png"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Guardar 32.png"))); // NOI18N
        jButton9.setBorder(null);
        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.setFocusPainted(false);
        jButton9.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar negro 32.png"))); // NOI18N
        jButton9.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar negro 32.png"))); // NOI18N
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carga 32.png"))); // NOI18N
        jButton10.setBorder(null);
        jButton10.setBorderPainted(false);
        jButton10.setContentAreaFilled(false);
        jButton10.setFocusPainted(false);
        jButton10.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carga grande 32.png"))); // NOI18N
        jButton10.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/carga grande 32.png"))); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel5.setText("Gestionar lista:");

        jLabel6.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel6.setText("Recargar datos:");

        jLabel7.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel7.setText("Guardar playList:");

        jLabel8.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel8.setText("Gestionar Usuarios:");

        jButton11.setText("Reporte");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Impact", 0, 12)); // NOI18N
        jLabel9.setText("Reporte:");

        jButton13.setText("Gestionar usuarios");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(nombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(28, 28, 28)))
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton11)
                                            .addComponent(jButton13))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))))
                                .addGap(23, 23, 23)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8)
                            .addComponent(jButton7))
                        .addGap(30, 30, 30)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addGap(16, 16, 16)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarDatosEnTabla() {
        // Obtener el usuario actual
        Usuario usuarioActual = UsuarioSesion.getUsuarioActual();
        if (usuarioActual == null) {
            JOptionPane.showMessageDialog(null, "No hay un usuario logueado.");
            return;
        }

        int usuarioId = usuarioActual.getId();  // Obtener el ID del usuario
        boolean esAdmin = usuarioActual.isEsAdministrador();

        System.out.println(esAdmin);

        jLabel9.setVisible(esAdmin);
        jLabel8.setVisible(esAdmin);
        jButton13.setVisible(esAdmin);
        jButton11.setVisible(esAdmin);

        // Obtener las canciones de las listas del usuario
        List<Object[]> cancionesConLista = ListaReproduccion.obtenerCancionesDeListasPorUsuario(usuarioId);

        // Limpiar el modelo de la tabla antes de cargar nuevos datos
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Elimina todas las filas existentes

        // Llenar el modelo de la tabla con los datos obtenidos
        for (Object[] fila : cancionesConLista) {
            String nombreLista = (String) fila[0];
            String titulo = (String) fila[1];
            String artista = (String) fila[2];
            String album = (String) fila[3]; // Obtener el álbum
            String duracion = (String) fila[4];
            String rutaArchivo = (String) fila[5]; // Cambiar a fila[5] para la ruta

            // Agregar la fila al modelo de la tabla
            model.addRow(new Object[]{nombreLista, titulo, artista, album, duracion, rutaArchivo}); // Incluir álbum
        }

        // Imprimir los datos obtenidos para verificación
        for (Object[] fila : cancionesConLista) {
            System.out.println("Lista: " + fila[0] + ", Título: " + fila[1] + ", Artista: " + fila[2]
                    + ", Álbum: " + fila[3] + ", Duración: " + fila[4] + ", Ruta: " + fila[5]); // Imprimir álbum
        }
    }

    //arrastrar y soltar en la tabla
    private void configureDragAndDrop() {
        TransferHandler handler = new TransferHandler() {
            private int[] rows = null;

            @Override
            public int getSourceActions(JComponent c) {
                return MOVE;
            }

            @Override
            protected Transferable createTransferable(JComponent c) {
                JTable table = (JTable) c;
                rows = table.getSelectedRows();
                return new StringSelection(""); // No es necesario transferir datos reales
            }

            @Override
            public boolean canImport(TransferHandler.TransferSupport info) {
                return info.isDrop() && info.isDataFlavorSupported(DataFlavor.stringFlavor);
            }

            @Override
            public boolean importData(TransferHandler.TransferSupport support) {
                if (!canImport(support)) {
                    return false;
                }

                JTable.DropLocation dl = (JTable.DropLocation) support.getDropLocation();
                int dropRow = dl.getRow();

                if (rows != null) {
                    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                    int[] selectedRows = rows;

                    for (int row : selectedRows) {
                        if (dropRow > row) {
                            dropRow--;
                        }
                        model.moveRow(row, row, dropRow);
                        dropRow++;
                    }
                    rows = null;
                    return true;
                }
                return false;
            }
        };

        jTable1.setDragEnabled(true);
        jTable1.setDropMode(DropMode.INSERT_ROWS);
        jTable1.setTransferHandler(handler);
        jTable1.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    //Add Button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        // Crear el frame o ventana principal para mostrar las canciones
        JFrame frame = new JFrame("Gestión de Canciones");
        frame.setSize(720, 400);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Obtener el ID del usuario logueado
        Usuario usuarioActual = UsuarioSesion.getUsuarioActual();
        if (usuarioActual == null) {
            JOptionPane.showMessageDialog(null, "No hay un usuario logueado.");
            return;
        }
        int usuarioId = usuarioActual.getId();  // Obtener el ID del usuario

        // Obtener la lista de canciones del usuario logueado desde la base de datos
        List<Cancion> canciones = Cancion.listarCancionesPorUsuario(usuarioId);

        // Crear los datos para la tabla
        String[] columnNames = {"ID", "Título", "Artista", "Álbum", "Duración"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

        // Llenar la tabla con las canciones del usuario
        for (Cancion c : canciones) {
            Object[] row = {c.getId(), c.getTitulo(), c.getArtista(), c.getAlbum(), c.getDuracion()};
            tableModel.addRow(row);
        }

        // Crear la tabla para mostrar las canciones
        JTable table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        frame.add(scrollPane, BorderLayout.CENTER);

        // Crear el panel para los botones
        JPanel buttonPanel = new JPanel();

        // Botón para agregar una canción
        JButton addButton = new JButton("Agregar Canción");
        addButton.addActionListener(e -> {
            // Llamar a la función para agregar canción, pasando la referencia a la tabla y la lista
            mostrarFormularioAgregar(canciones, tableModel);
        });
        buttonPanel.add(addButton);

        // Botón para modificar una canción
        JButton modifyButton = new JButton("Modificar Canción");
        modifyButton.addActionListener(e -> {
            // Obtener la fila seleccionada
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                int cancionId = (int) table.getValueAt(selectedRow, 0); // Obtener ID de la canción
                Cancion cancionSeleccionada = Cancion.obtenerPorId(cancionId); // Recuperar la canción por ID
                if (cancionSeleccionada != null) { // Verificar que se encontró la canción
                    mostrarFormularioModificar(cancionSeleccionada, table); // Pasar la tabla en lugar del modelo
                } else {
                    JOptionPane.showMessageDialog(frame, "No se pudo encontrar la canción seleccionada.");
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Por favor selecciona una canción para modificar.");
            }
        });

        buttonPanel.add(modifyButton);

        // Botón para eliminar una canción
        JButton deleteButton = new JButton("Eliminar Canción");
        deleteButton.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                // Obtener el ID de la canción seleccionada
                int cancionId = (int) table.getValueAt(selectedRow, 0);

                // Llamar al método para eliminar la canción de la base de datos
                Cancion.eliminarPorId(cancionId);

                // Eliminar la canción del modelo de la tabla
                tableModel.removeRow(selectedRow);

                // Mostrar mensaje de confirmación
                JOptionPane.showMessageDialog(frame, "Canción eliminada exitosamente.");
            } else {
                JOptionPane.showMessageDialog(frame, "Por favor selecciona una canción para eliminar.");
            }
        });

        buttonPanel.add(deleteButton);

        // Botón para agregar una canción a la lista de reproducción
        JButton addToPlaylistButton = new JButton("Agregar Canción a la Lista");
        addToPlaylistButton.addActionListener(e -> {
            // Obtener la fila seleccionada en la tabla
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                int cancionId = (int) table.getValueAt(selectedRow, 0); // Obtener ID de la canción seleccionada
                Cancion cancionSeleccionada = Cancion.obtenerPorId(cancionId); // Recuperar la canción por ID
                if (cancionSeleccionada != null) {
                    // Llamar a la función para mostrar el formulario y agregar la canción a una lista
                    mostrarFormularioAgregarALista(cancionSeleccionada, usuarioActual); // Paso de la canción seleccionada
                } else {
                    JOptionPane.showMessageDialog(frame, "No se pudo encontrar la canción seleccionada.");
                }
            } else {
                JOptionPane.showMessageDialog(frame, "Por favor selecciona una canción para agregar a la lista.");
            }
        });

        buttonPanel.add(addToPlaylistButton);

        // Añadir el panel de botones al frame
        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Mostrar la ventana
        frame.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    // pausa
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            musica.stop();
        } catch (Exception e) {
            // Manejar la excepción aquí
            System.err.println("Error al detener la reproducción: ");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //tabla general de agregar canciones
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String filePath = (String) jTable1.getValueAt(selectedRow, 4);

            if (filePath != null && !filePath.isEmpty()) {
                if (musica != null) {
                    musica.stop();  // Detener cualquier reproducción en curso
                } else {
                    musica = new PanelReproductor();
                }
                musica.play(filePath);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontro la ruta del archivo." + filePath);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecciona una canción de la lista.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    //Search Button
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// Obtener el nombre
        String noCan = nombreCancion.getText().trim();

// Verificar si el nombre está vacío
        if (noCan.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el nombre de la cancion.");
            return; // Salir del método si el campo está vacío
        }

// Si el nombre no está vacío, proceder con la búsqueda
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        boolean encontrada = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            String titulo = (String) model.getValueAt(i, 0); // La primera columna es el título
            if (titulo.equalsIgnoreCase(noCan)) {
                // Selecciona la fila encontrada en la tabla
                jTable1.setRowSelectionInterval(i, i);
                encontrada = true;
                JOptionPane.showMessageDialog(this, "CANCION " + titulo + " ENCONTRADA ");
                break;
            }
        }

        if (!encontrada) {
            JOptionPane.showMessageDialog(null, "Cancion no existe");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    //next button
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        //botin next
        try {
            int selectedRow = jTable1.getSelectedRow();

            if (selectedRow != -1) {
                // Calcula la siguiente fila, circular al principio si es necesario
                int nextRow = (selectedRow + 1) % jTable1.getRowCount();
                String filePath = (String) jTable1.getValueAt(nextRow, 4);

                if (filePath != null && !filePath.isEmpty()) {
                    if (musica != null) {
                        musica.stop(); // Detener cualquier reproducción en curso
                    } else {
                        musica = new PanelReproductor();
                    }
                    musica.play(filePath);
                    jTable1.setRowSelectionInterval(nextRow, nextRow);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró la ruta del archivo.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona una canción de la lista.");
            }
        } catch (Exception e) {
            // Manejar cualquier excepción que pueda ocurrir
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar reproducir la siguiente canción: ");
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    //back button
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // botón atrás
        try {
            int selectedRow = jTable1.getSelectedRow();

            if (selectedRow != -1) {
                int prevRow = (selectedRow - 1 + jTable1.getRowCount()) % jTable1.getRowCount(); // Circular hacia el final
                String filePath = (String) jTable1.getValueAt(prevRow, 4);

                if (filePath != null && !filePath.isEmpty()) {
                    if (musica != null) {
                        musica.stop(); // Detener cualquier reproducción en curso
                    } else {
                        musica = new PanelReproductor();
                    }
                    musica.play(filePath);
                    jTable1.setRowSelectionInterval(prevRow, prevRow);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró la ruta del archivo.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Selecciona una canción de la lista.");
            }
        } catch (Exception e) {
            // Manejar cualquier excepción que pueda ocurrir
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar reproducir la canción anterior: ");
            e.printStackTrace(); // Imprime el stack trace para depuración
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    //Delete button
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
// delete


    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

    }//GEN-LAST:event_jButton8ActionPerformed

    //exportar
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar archivo CSV");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                int columnCount = model.getColumnCount();

                // Escribir la cabecera del archivo CSV
                for (int i = 0; i < columnCount; i++) {
                    writer.write(model.getColumnName(i));
                    if (i < columnCount - 1) {
                        writer.write(",");
                    }
                }
                writer.newLine();

                // Escribir los datos de las filas
                for (int i = 0; i < model.getRowCount(); i++) {
                    for (int j = 0; j < columnCount; j++) {
                        writer.write(String.valueOf(model.getValueAt(i, j)));
                        if (j < columnCount - 1) {
                            writer.write(",");
                        }
                    }
                    writer.newLine();
                }

                JOptionPane.showMessageDialog(this, "Lista de reproducción exportada exitosamente.");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    //Carga de datos
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Abrir archivo CSV");
        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = fileChooser.getSelectedFile();

            try (BufferedReader reader = new BufferedReader(new FileReader(fileToOpen))) {
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); // Limpiar la tabla antes de cargar los nuevos datos

                String line;
                boolean isFirstLine = true;
                String[] columnNames = null;

                while ((line = reader.readLine()) != null) {
                    String[] values = line.split(","); // Asumimos que el archivo CSV usa comas como delimitadores

                    if (isFirstLine) {
                        // Configurar las cabeceras de la tabla
                        columnNames = values;
                        model.setColumnIdentifiers(columnNames);
                        isFirstLine = false;
                    } else {
                        // Añadir los datos de las filas
                        model.addRow(values);
                    }
                }

                if (columnNames == null) {
                    JOptionPane.showMessageDialog(this, "El archivo CSV está vacío o no tiene cabeceras.", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Archivo CSV cargado exitosamente.");
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al cargar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
 // Obtener el reporte de los usuarios
    List<Object[]> reporteUsuarios = ReportesDAO.obtenerReporteUsuarios();

    // Crear un nuevo JFrame para mostrar el reporte
    JFrame frame = new JFrame("Reporte de Usuarios");
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    frame.setSize(600, 400);

    // Crear el modelo de la tabla
    String[] columnNames = {"Nombre", "Total Canciones Subidas", "Total Listas Creadas"};
    DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

    // Llenar el modelo con los datos del reporte
    for (Object[] fila : reporteUsuarios) {
        tableModel.addRow(fila);
    }

    // Crear la tabla
    JTable table = new JTable(tableModel);
    JScrollPane scrollPane = new JScrollPane(table);
    frame.add(scrollPane);

    // Configurar el JFrame y hacerlo visible
    frame.setVisible(true);
    
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // Crear un nuevo JFrame para mostrar la tabla de usuarios
        JFrame frameUsuarios = new JFrame("Lista de Usuarios");
        frameUsuarios.setSize(600, 400);

        // Obtener los usuarios
        List<Usuario> usuarios = Usuario.listarUsuarios();

        // Crear el modelo de la tabla
        String[] columnas = {"ID", "Nombre", "Apellido", "Correo", "Administrador"};
        DefaultTableModel model = new DefaultTableModel(columnas, 0);

        // Llenar el modelo con los datos de los usuarios
        for (Usuario usuario : usuarios) {
            Object[] fila = {
                usuario.getId(),
                usuario.getNombre(),
                usuario.getApellido(),
                usuario.getCorreo(),
                usuario.isEsAdministrador() ? "Sí" : "No" // Mostrar si es administrador o no
            };
            model.addRow(fila);
        }

        // Crear la tabla y asignarle el modelo
        JTable tablaUsuarios = new JTable(model);
        JScrollPane scrollPane = new JScrollPane(tablaUsuarios);

        // Agregar el JScrollPane al JFrame
        frameUsuarios.add(scrollPane);

        // Mostrar el JFrame
        frameUsuarios.setVisible(true);
    }//GEN-LAST:event_jButton13ActionPerformed

    // agremas un nueva cancion
    private void mostrarFormularioAgregar(List<Cancion> canciones, DefaultTableModel tableModel) {
        // Crear el frame o ventana para el formulario
        JFrame frame = new JFrame("Agregar Nueva Canción");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new GridLayout(6, 2));

        // Crear los campos del formulario
        JLabel archivoLabel = new JLabel("Archivo MP3:");
        JTextField archivoField = new JTextField();
        archivoField.setEnabled(false);  // Campo bloqueado para el usuario, solo muestra la ruta del archivo

        JButton archivoButton = new JButton("Seleccionar Archivo");

        JLabel tituloLabel = new JLabel("Título:");
        JTextField tituloField = new JTextField();
        tituloField.setEnabled(false);  // Inicialmente bloqueado

        JLabel artistaLabel = new JLabel("Artista:");
        JTextField artistaField = new JTextField();
        artistaField.setEnabled(false);  // Inicialmente bloqueado

        JLabel albumLabel = new JLabel("Álbum:");
        JTextField albumField = new JTextField();
        albumField.setEnabled(false);  // Inicialmente bloqueado

        JLabel duracionLabel = new JLabel("Duración:");
        JTextField duracionField = new JTextField();
        duracionField.setEnabled(false);  // Bloqueado permanentemente, se llena automáticamente

        // Acción para el botón de selección de archivo
        archivoButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("MP3 Files", "mp3"));
            int returnValue = fileChooser.showOpenDialog(null);

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                archivoField.setText(selectedFile.getAbsolutePath());

                // Desbloquear los campos de título, artista y álbum
                tituloField.setEnabled(true);
                artistaField.setEnabled(true);
                albumField.setEnabled(true);

                // Obtener automáticamente el título de la canción del archivo seleccionado
                tituloField.setText(selectedFile.getName());

                // Intentar obtener la duración del archivo MP3
                String duracion = "00:00";
                try {
                    AudioFile audioFile = AudioFileIO.read(selectedFile);
                    Tag tag = audioFile.getTag();
                    if (tag != null) {
                        int duracionSegundos = audioFile.getAudioHeader().getTrackLength();
                        duracion = String.format("%02d:%02d", duracionSegundos / 60, duracionSegundos % 60);
                    }
                    duracionField.setText(duracion);  // Actualizar el campo de duración con la duración obtenida
                } catch (Exception ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "No se pudieron obtener los datos. Se usarán valores predeterminados.");
                }
            }
        });

        // Botón para guardar la canción
        JButton saveButton = new JButton("Guardar");
        saveButton.setEnabled(false);  // Deshabilitado hasta que el archivo sea seleccionado

        archivoButton.addActionListener(e -> {
            // Habilitar el botón "Guardar" después de seleccionar el archivo
            saveButton.setEnabled(true);
        });

        saveButton.addActionListener(e -> {
            String titulo = tituloField.getText();
            String artista = artistaField.getText();
            String album = albumField.getText();
            String duracion = duracionField.getText();
            String rutaArchivo = archivoField.getText();

            // Validar que los campos no estén vacíos
            if (titulo.isEmpty() || artista.isEmpty() || album.isEmpty() || rutaArchivo.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Por favor, complete todos los campos.");
                return;
            }

            // Obtener el ID del usuario actual desde UsuarioSesion
            Usuario usuarioActual = UsuarioSesion.getUsuarioActual();
            if (usuarioActual == null) {
                JOptionPane.showMessageDialog(null, "No hay un usuario logueado.");
                return;
            }
            int usuarioId = usuarioActual.getId();  // Obtener el ID del usuario logueado

            // Crear el objeto Cancion
            Cancion nuevaCancion = new Cancion(titulo, artista, album, duracion, rutaArchivo, usuarioId);

            // Guardar la canción en la base de datos
            nuevaCancion.guardar();

            // Mostrar mensaje de confirmación
            JOptionPane.showMessageDialog(frame, "Canción agregada exitosamente.");

            // Actualizar la lista de canciones desde la base de datos
            canciones.clear(); // Limpiar la lista actual
            canciones.addAll(Cancion.listarCancionesPorUsuario(usuarioId));  // Añadir las canciones actualizadas

            // Limpiar el modelo de la tabla
            tableModel.setRowCount(0);

            // Volver a cargar todas las canciones en la tabla
            for (Cancion cancion : canciones) {
                tableModel.addRow(new Object[]{
                    cancion.getId(),
                    cancion.getTitulo(),
                    cancion.getArtista(),
                    cancion.getAlbum(),
                    cancion.getDuracion(),
                    cancion.getRutaArchivo()
                });
            }

            // Cerrar el formulario
            frame.dispose();
        });

        // Añadir los componentes al frame
        frame.add(archivoLabel);
        frame.add(archivoField);
        frame.add(archivoButton);

        frame.add(tituloLabel);
        frame.add(tituloField);

        frame.add(artistaLabel);
        frame.add(artistaField);

        frame.add(albumLabel);
        frame.add(albumField);

        frame.add(duracionLabel);
        frame.add(duracionField);

        // Añadir el botón de guardar
        frame.add(new JLabel());  // Espacio vacío para alinear
        frame.add(saveButton);

        // Mostrar el formulario
        frame.setVisible(true);
    }

    // modificamos una cancion
    private void mostrarFormularioModificar(Cancion cancionSeleccionada, JTable table) {
        // Crear el frame o ventana para el formulario
        JFrame frame = new JFrame("Modificar Canción");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new GridLayout(6, 2));

        // Crear los campos del formulario y llenarlos con los datos de la canción seleccionada
        JLabel tituloLabel = new JLabel("Título:");
        JTextField tituloField = new JTextField(cancionSeleccionada.getTitulo()); // Cargar título
        tituloField.setEnabled(true);  // Permitimos que el título sea editable

        JLabel artistaLabel = new JLabel("Artista:");
        JTextField artistaField = new JTextField(cancionSeleccionada.getArtista()); // Cargar artista
        artistaField.setEnabled(true);  // Permitimos que el artista sea editable

        JLabel albumLabel = new JLabel("Álbum:");
        JTextField albumField = new JTextField(cancionSeleccionada.getAlbum()); // Cargar álbum
        albumField.setEnabled(true);  // Permitimos que el álbum sea editable

        JLabel duracionLabel = new JLabel("Duración:");
        JTextField duracionField = new JTextField(cancionSeleccionada.getDuracion()); // Cargar duración
        duracionField.setEnabled(false);  // Bloqueado, no editable

        // Botón para guardar la modificación
        JButton saveButton = new JButton("Guardar Cambios");
        saveButton.addActionListener(e -> {
            String titulo = tituloField.getText();
            String artista = artistaField.getText();
            String album = albumField.getText();

            // Validar que los campos no estén vacíos
            if (titulo.isEmpty() || artista.isEmpty() || album.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "Por favor, complete todos los campos.");
                return;
            }

            // Actualizar los datos de la canción
            cancionSeleccionada.setTitulo(titulo);
            cancionSeleccionada.setArtista(artista);
            cancionSeleccionada.setAlbum(album);

            // Llamar al método actualizar para guardar los cambios en la base de datos
            cancionSeleccionada.actualizar();

            // Obtener la fila seleccionada en la tabla
            int selectedRow = table.getSelectedRow(); // Obtener la fila seleccionada

            if (selectedRow >= 0) { // Asegurarse de que hay una fila seleccionada
                table.setValueAt(titulo, selectedRow, 1); // Actualizar título
                table.setValueAt(artista, selectedRow, 2); // Actualizar artista
                table.setValueAt(album, selectedRow, 3); // Actualizar álbum
                // No se actualiza duración ya que está bloqueada

                // Mostrar mensaje de confirmación
                JOptionPane.showMessageDialog(frame, "Canción actualizada exitosamente.");
            } else {
                JOptionPane.showMessageDialog(frame, "Por favor selecciona una canción para modificar.");
            }

            // Cerrar el formulario
            frame.dispose();
        });

        // Añadir los componentes al frame
        frame.add(tituloLabel);
        frame.add(tituloField);

        frame.add(artistaLabel);
        frame.add(artistaField);

        frame.add(albumLabel);
        frame.add(albumField);

        frame.add(duracionLabel);
        frame.add(duracionField);

        // Añadir el botón de guardar
        frame.add(new JLabel());  // Espacio vacío para alinear
        frame.add(saveButton);

        // Mostrar el formulario
        frame.setVisible(true);
    }

    private void mostrarFormularioAgregarALista(Cancion cancionSeleccionada, Usuario usuarioActual) {
        // Crear el frame o ventana para el formulario de agregar a lista
        JFrame frame = new JFrame("Agregar Canción a la Lista");
        frame.setSize(600, 400);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Panel principal
        JPanel mainPanel = new JPanel(new BorderLayout());

        // Panel para crear una lista de reproducción
        JPanel crearListaPanel = new JPanel(new GridLayout(2, 2));
        JLabel nuevaListaLabel = new JLabel("Nombre de nueva lista:");
        JTextField nuevaListaField = new JTextField(); // Campo para el nombre de la nueva lista
        JButton crearListaButton = new JButton("Crear Lista");
        crearListaPanel.add(nuevaListaLabel);
        crearListaPanel.add(nuevaListaField);
        crearListaPanel.add(new JLabel()); // Espacio vacío
        crearListaPanel.add(crearListaButton);

        // Panel para las listas de reproducción
        JPanel listaPanel = new JPanel(new BorderLayout());

        // Título para la tabla de listas de reproducción
        JLabel listasLabel = new JLabel("Listas de Reproducción:");
        listaPanel.add(listasLabel, BorderLayout.NORTH);

        // Obtener las listas de reproducción del usuario logueado
        List<ListaReproduccion> listas = ListaReproduccion.obtenerListasPorUsuario(usuarioActual.getId());

        // Crear la tabla con las listas de reproducción
        String[] columnNames = {"ID", "Nombre"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);

        // Llenar la tabla con las listas de reproducción del usuario
        for (ListaReproduccion lista : listas) {
            Object[] row = {lista.getId(), lista.getNombre()};
            tableModel.addRow(row);
        }

        JTable table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        listaPanel.add(scrollPane, BorderLayout.CENTER);

        // Botón para agregar la canción a la lista seleccionada
        JButton agregarButton = new JButton("Agregar a la Lista");
        agregarButton.addActionListener(e -> {
            // Obtener la fila seleccionada
            int selectedRow = table.getSelectedRow();
            if (selectedRow >= 0) {
                int listaId = (int) table.getValueAt(selectedRow, 0); // Obtener ID de la lista seleccionada

                System.out.println(cancionSeleccionada.getId());
                System.out.println(listaId);

                // Agregar la canción a la lista de reproducción
                ListaReproduccion.agregarCancionALista(cancionSeleccionada.getId(), listaId);

                cargarDatosEnTabla();  // Llama a la función para actualizar la JTable

                // Mostrar mensaje de éxito
                JOptionPane.showMessageDialog(frame, "Canción agregada a la lista exitosamente.");
                frame.dispose(); // Cierra el frame después de agregar
            } else {
                JOptionPane.showMessageDialog(frame, "Por favor selecciona una lista.");
            }
        });

        // Acción para crear una nueva lista
        crearListaButton.addActionListener(e -> {
            String nombreNuevaLista = nuevaListaField.getText().trim();
            if (!nombreNuevaLista.isEmpty()) {
                try {
                    // Crear la nueva lista de reproducción en la base de datos
                    ListaReproduccion.crearLista(usuarioActual.getId(), nombreNuevaLista);

                    // Volver a consultar las listas de reproducción después de la creación
                    List<ListaReproduccion> listasActualizadas = ListaReproduccion.obtenerListasPorUsuario(usuarioActual.getId());

                    // Limpiar el modelo de la tabla
                    tableModel.setRowCount(0); // Limpiar filas existentes

                    // Llenar la tabla con las listas de reproducción actualizadas
                    for (ListaReproduccion lista : listasActualizadas) {
                        Object[] row = {lista.getId(), lista.getNombre()};
                        tableModel.addRow(row);
                    }

                    // Mostrar un mensaje de éxito
                    JOptionPane.showMessageDialog(frame, "Lista creada exitosamente.");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(frame, "Error al crear la lista: " + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(frame, "El nombre de la lista no puede estar vacío.");
            }
        });

        // Panel para los botones de acciones
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(agregarButton); // Botón de agregar canción a la lista

        // Añadir los paneles a la ventana principal
        mainPanel.add(listaPanel, BorderLayout.CENTER);  // Añadir la tabla de listas
        mainPanel.add(crearListaPanel, BorderLayout.SOUTH); // Añadir el panel de crear lista

        frame.add(mainPanel, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Mostrar la ventana
        frame.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormCancion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormCancion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nombreCancion;
    // End of variables declaration//GEN-END:variables
}
